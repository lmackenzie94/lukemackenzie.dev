---
import { Image } from 'astro:assets';

const { project, index } = Astro.props;
const { title, tags, images } = project.data;
const featuredImage = images[0];

// eager load first 3 images
const imageLoading = index < 3 ? 'eager' : 'lazy';

const tagsToShow = tags.slice(0, 3);
---

<a
  transition:name={`project-${title}-card`}
  href={`/projects/${project.slug}`}
  class="card project-card block group mx-auto max-w-lg bg-white border border-gray-200 rounded-2xl overflow-hidden transition-shadow duration-500 shadow-md shadow-neutral-200/30 hover:shadow-neutral-200/60 hover:shadow-lg hover:z-10 focus:z-10 hover:border-gray-300"
  data-tilt-max="5"
  data-tilt-scale="1.04"
  data-tilt-reverse="true"
  data-tilt-speed="1500"
  data-tilt-glare="true"
  data-tilt-max-glare="0.3"
>
  <article class="h-full">
    <Image
      src={featuredImage.src}
      alt={featuredImage.alt}
      format="webp"
      class="aspect-[2/1] border-b border-gray-100 object-cover object-top opacity-75 group-hover:opacity-100 group-focus:opacity-100 transition-opacity duration-500"
      widths={[800, 1200, 1600]}
      loading={imageLoading}
    />
    <div
      class="h-full p-4 bg-white shadow-[0_-5px_20px_0_rgba(0,0,0,0.1)] group-hover:shadow-none group-focus:shadow-none transition-shadow duration-500"
    >
      <h3
        transition:name={`project-${title}-title`}
        class="text-pretty text-3xl font-heading text-center mb-1 text-gray-600 group-hover:text-black group-focus:text-black transition-colors"
      >
        {title}
      </h3>

      <ul
        class="flex flex-wrap gap-1 justify-center saturate-[.3] group-hover:saturate-100 group-focus:saturate-100 mt-2"
      >
        {
          tagsToShow.map((tag: string, index: number) => (
            <li
              class={`text-xxs tracking-tight font-mono rounded-full px-3 py-1 inline-block ${index % 2 === 0 ? 'bg-secondary-light text-secondary' : 'bg-primary-light text-primary'}`}
            >
              {tag}
            </li>
          ))
        }
        {
          tags.length > tagsToShow.length && (
            <li class="text-xxs tracking-tight font-mono rounded-full px-2 py-1 inline-block bg-gray-100 text-gray-600">
              {`+ ${tags.length - tagsToShow.length}`}
            </li>
          )
        }
      </ul>
    </div>
  </article>
</a>

<style>
  .project-card {
    opacity: 0;
  }

  .project-card.show {
    opacity: 1;
    transition: transform 0.4s ease-in-out;
  }
</style>

<script>
  import VanillaTilt from 'vanilla-tilt';

  function initTilt() {
    // force vanilla-tilt to re-execute
    // not sure if this is the best way to do this but needs to be done if using ViewTransitions
    // otherwise changing the page and returning to the home page will cause the tilt to not work
    const cards = Array.from(document.querySelectorAll('.project-card'));
    cards.forEach(card => {
      card.setAttribute('data-tilt', '');
    });

    const els = Array.from(
      document.querySelectorAll('[data-tilt]')
    ) as HTMLElement[];

    VanillaTilt.init(els);
  }

  document.addEventListener(
    'astro:page-load',
    () => {
      window.doneCardAnimation = true;

      const cards = Array.from(document.querySelectorAll('.project-card'));

      const projectsHeading = document.querySelector('#projects-heading');
      const projectsHeadingRect = projectsHeading.getBoundingClientRect();

      const startingPosition = {
        x: window.innerWidth / 2 - cards[0].getBoundingClientRect().width / 2,
        y: projectsHeadingRect.y + projectsHeadingRect.height * 2.5
      };

      // const referenceCard = cards[1];
      // const referenceCardRect = referenceCard.getBoundingClientRect();

      // position all other cards in the exact same position as the reference card
      cards.forEach(card => {
        const cardRect = card.getBoundingClientRect();
        const rotation = Math.random() * 10 - 5;
        card.style.transform = `translateX(${startingPosition.x - cardRect.x}px) translateY(${startingPosition.y - cardRect.y}px) rotate(${rotation}deg)`;
      });

      const delay = 200;
      setTimeout(() => {
        cards.forEach((card, index) => {
          setTimeout(() => {
            card.classList.add('show');
          }, index * delay);
        });
      }, 500);

      setTimeout(
        () => {
          cards.reverse().forEach((card: HTMLDivElement, index: number) => {
            setTimeout(() => {
              card.style.transform = `translateX(0) translateY(0) rotate(0deg)`;

              if (index === cards.length - 1) {
                setTimeout(() => {
                  initTilt();
                  document.addEventListener('astro:page-load', initTilt);
                }, 1000);
              }
            }, index * 50);
          });
        },
        delay * cards.length + 200
      );
    },
    { once: true }
  );
</script>

<script>
  document.addEventListener('astro:after-swap', () => {
    if (window.doneCardAnimation) {
      const cards = Array.from(document.querySelectorAll('.project-card'));
      cards.forEach(card => {
        card.classList.add('show');
      });

      initTilt();
    }
  });
</script>
