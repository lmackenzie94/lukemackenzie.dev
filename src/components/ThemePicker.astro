---
const themes = [
  'green',
  'purple',
  'blue',
  'brown',
  'red',
  'turquoise',
  'pink',
  'gray'
];
---

<div class="absolute top-3 w-full z-20">
  <div class="flex flex-wrap gap-2 justify-center items-center">
    {
      themes.map(theme => (
        <button
          tabindex="0"
          style={`background-color: rgb(var(--${theme}));`}
          class={`rounded-full w-5 h-5 cursor-pointer ring-1 ring-transparent ring-offset-1 hover:scale-105 active:scale-95 transition-transform`}
          data-theme={theme}
          aria-label={`Switch to ${theme} theme`}
        />
      ))
    }
  </div>
</div>

<!-- TODO: clean all this up -->
<script>
  function activateTheme(
    theme: string,
    trigger: 'click' | 'page-load',
    doc: Document = document
  ) {
    doc.documentElement.setAttribute('data-theme', theme);

    const heroTags = doc.querySelectorAll('.open-tag, .close-tag');
    heroTags?.forEach(tag => {
      tag.classList.remove('visible');
    });

    const heroH1 = doc.querySelector('.hero h1');

    if (trigger === 'click') {
      heroH1?.classList.add('underline-down');
    }

    const themeButtons = doc.querySelectorAll(
      '[data-theme]'
    ) as NodeListOf<HTMLButtonElement>;

    themeButtons.forEach(button => {
      button.classList.remove('ring-black');
      button.classList.add('ring-transparent');

      if (button.dataset.theme === theme) {
        button.classList.remove('ring-transparent');
        button.classList.add('ring-black');
      }
    });

    localStorage.setItem('theme', theme);

    setTimeout(() => {
      heroH1?.classList.remove('underline-down');
      heroTags?.forEach(tag => {
        tag.classList.add('visible');
      });
    }, 1000);
  }

  const theme = localStorage.getItem('theme');

  if (theme) {
    activateTheme(theme, 'page-load');
  } else {
    const activeTheme = document.documentElement.getAttribute('data-theme');

    if (activeTheme) {
      activateTheme(activeTheme, 'page-load');
    }
  }

  const themeButtons = document.querySelectorAll(
    'button[data-theme]'
  ) as NodeListOf<HTMLButtonElement>;

  // TODO: do this better...
  themeButtons.forEach(button => {
    button.addEventListener('click', () => {
      const theme = button.dataset.theme;
      if (theme) {
        activateTheme(theme, 'click');
      }
    });
  });

  document.addEventListener('astro:before-swap', ev => {
    const theme = localStorage.getItem('theme');

    if (theme) {
      ev.newDocument.documentElement.setAttribute('data-theme', theme);
      activateTheme(theme, 'page-load', ev.newDocument);
    }

    const themeButtons = ev.newDocument.querySelectorAll(
      'button[data-theme]'
    ) as NodeListOf<HTMLButtonElement>;

    // TODO: do this better...
    themeButtons.forEach(button => {
      button.addEventListener('click', () => {
        const theme = button.dataset.theme;
        if (theme) {
          activateTheme(theme, 'click');
        }
      });
    });
  });
</script>
