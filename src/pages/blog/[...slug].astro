---
import { getCollection } from 'astro:content';
import BlogLayout from '@layouts/BlogLayout.astro';
import { Image } from 'astro:assets';
import { formatDate } from '@utils/index.ts';

export async function getStaticPaths() {
  const blogs = await getCollection('blog');

  return blogs.map(entry => ({
    params: { slug: entry.slug },
    props: { entry }
  }));
}
const { entry } = Astro.props;
const { Content, headings } = await entry.render();

const { title, publishDate, image } = entry.data;
const formattedDate = formatDate(publishDate);
---

<script>
  const theme = localStorage.getItem('theme');
  if (theme) {
    document.documentElement.setAttribute('data-theme', theme);
  }
</script>

<BlogLayout title={title}>
  <article
    transition:animate="slide"
    class="bg-white border border-gray-200 rounded-2xl shadow-lg shadow-neutral-200/50 overflow-hidden relative p-2 sm:p-4"
  >
    <Image
      src={image.src}
      alt={image.alt}
      format="webp"
      class="w-full aspect-[3/1] object-cover object-top rounded-xl"
      widths={[800, 1200, 1600]}
    />
    <div
      class="p-3 md:p-6 prose prose-sm sm:prose-base prose:text-gray-600 prose-h1:mb-0 prose-a:text-secondary prose-headings:font-heading prose-headings:text-black prose-headings:tracking-wide max-w-[70ch] mx-auto prose-a:no-underline"
    >
      <h1 class="text-pretty">
        {title}
      </h1>

      <time
        class="block text-xs text-gray-400 font-mono mt-2 mb-4"
        datetime={formattedDate}>{formattedDate}</time
      >
      {
        headings.map((heading, index) => (
          <a
            href={`#${heading.slug}`}
            class={`text-xxs font-mono rounded-full px-3 py-1 mr-1 mt-1 inline-block ${index % 2 === 0 ? 'bg-secondary-light !text-secondary' : 'bg-primary-light !text-primary'}`}
          >
            <span class="text-gray-400">#</span>
            {heading.text}
          </a>
        ))
      }

      <Content />
    </div>
  </article>
</BlogLayout>

<!-- TODO: better way to do this? -->
<style is:global>
  .callout {
    border-left: 4px solid;
    padding: 1rem;
    margin: 1rem 0;
  }
  .callout.success {
    background-color: var(--primary-light);
    border-color: rgb(var(--primary));
  }
  .callout.info {
    background-color: var(--secondary-light);
    border-color: rgb(var(--secondary));
  }
  .callout.error {
    background-color: #ff000018;
    border-color: #ff0000;
  }
  .callout.warn {
    background-color: #ffcc0020;
    border-color: #ffcc00;
  }
</style>
